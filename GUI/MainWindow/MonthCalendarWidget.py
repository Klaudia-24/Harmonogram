from typing import List
from PyQt5 import QtWidgets, QtGui, QtCore
from GUI.Autogenerated.MainWindow.AGMainCalendarWidget import Ui_Form
from datetime import date
import datetime
import dateutils
from Objects.Event import getEventsForDay
from WindowObjects.CalendarCellWidget import CalendarCellWidget
from Objects.WeekEvents import Week

class MainCalendarWidget(QtWidgets.QWidget):
    clickedDaySignal = QtCore.pyqtSignal()
    dayLabelList: List[CalendarCellWidget] = list()
    weekDaysLabelList: List[CalendarCellWidget] = list()
    weekNumbersLabelList: List[CalendarCellWidget] = list() # zero element is column name, not week number

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.mainCalendarWidget = Ui_Form()
        self.mainCalendarWidget.setupUi(self)
        self.dateOnDateBar = date.today()
        self.init_ui()

    def init_ui(self) -> None:

        self.mainCalendarWidget.calendarGridLayout.setSpacing(1)

        for i in range(1, 43):
            self.dayLabelList.append(getattr(self.mainCalendarWidget, 'day_' + str(i)))
        for label in self.dayLabelList:
            label.setClicked(self.getLabelNameFromCalendarDayLabel)

        for i in range(1, 8):
            self.weekDaysLabelList.append(getattr(self.mainCalendarWidget, 'weekDay' + str(i)))
        for i in range(0, 7):
            self.weekNumbersLabelList.append(getattr(self.mainCalendarWidget, 'weekNumber' + str(i)))

        self.setWeekDaysAppearance()
        self.setWeekNumbersAppearance()
        self.setDaysWidgetAppearance()
        self.generateCalendarDays()

    def setWeekDaysAppearance(self):
        for label in self.weekDaysLabelList:
            label.setBackgroundColor("#bfbfbf")
            label.setEventTypeDotRatio(0)
            label.setFontAppearance('Times', QtGui.QFont.Normal, 8.1)

    def setWeekNumbersAppearance(self):
        for label in self.weekNumbersLabelList:
            label.setBackgroundColor("#bfbfbf")
            label.setEventTypeDotRatio(0)
            label.setFontAppearance('Times', QtGui.QFont.Normal, 7)

    def setDaysWidgetAppearance(self):
        for label in self.dayLabelList:
            label.setEventTypeDotRatio(10)
            label.setFontAppearance('Times', QtGui.QFont.Normal,  3.5)

    def generateCalendarDays(self):
        startingDate = datetime.datetime(self.dateOnDateBar.year, self.dateOnDateBar.month, 1) - \
                       dateutils.relativedelta(days=Week[datetime.datetime(self.dateOnDateBar.year,
                               self.dateOnDateBar.month, 1).strftime('%A')].value)
        for label in self.dayLabelList:
            if startingDate.month == self.dateOnDateBar.month:
                label.setBackgroundColor("#80bfff")
            else:
                label.setBackgroundColor("#cce6ff")
            label.setText(str(startingDate.day))
            label.setFontAppearance('Times', QtGui.QFont.Normal, 3.5)
            eventList = getEventsForDay(startingDate)
            if eventList:
                label.setEventColorSet(set([event["type"] for event in eventList]))

            startingDate = startingDate + dateutils.relativedelta(days=1)

        if self.dateOnDateBar.year == date.today().year and self.dateOnDateBar.month == date.today().month:
            self.distinguishTodayDate()

    def distinguishTodayDate(self):
        startingDate = datetime.datetime(self.dateOnDateBar.year, self.dateOnDateBar.month, 1) - \
                       dateutils.relativedelta(days=Week[datetime.datetime(self.dateOnDateBar.year,
                                                                           self.dateOnDateBar.month, 1).strftime(
                           '%A')].value)
        index = int((datetime.datetime.combine(date.today(), datetime.datetime.min.time())-startingDate).days)
        self.dayLabelList[index].setBackgroundColor("#339966")
        self.dayLabelList[index].setFontAppearance('Times', QtGui.QFont.Bold, 3.5)

    def distinguishClickedDay(self):
        firstWeekDayOfMonth = int(
            datetime.datetime(self.dateOnDateBar.year, self.dateOnDateBar.month, 1).strftime('%w'))

        if firstWeekDayOfMonth == 0:
            firstWeekDayOfMonth = 7

        clickedIndex = self.dateOnDateBar.day + firstWeekDayOfMonth - 2
        self.dayLabelList[clickedIndex].setBackgroundColor("#66cc99")

        self.clickedDaySignal.emit()

    def getLabelNameFromCalendarDayLabel(self, event, labelName):
        button = event.button()
        modify = event.modifiers()
        if modify == QtCore.Qt.NoModifier and button == QtCore.Qt.LeftButton:
            labelObject = getattr(self.mainCalendarWidget, labelName)
            self.setClickedDateInDateBar(labelObject.getText(), labelName)
            self.distinguishClickedDay()
            return

    def updateWidgetSize(self):

        self.mainCalendarWidget.layoutWidget.setGeometry(0, 0, self.width(), self.height())
        self.resize(self.width(), self.height())
        self.mainCalendarWidget.calendarGridLayout.setGeometry(QtCore.QRect(0, 0, self.width(), self.height()))

    def resizeEvent(self, a0: QtGui.QResizeEvent) -> None:
        self.updateWidgetSize()

    def changeDate(self, calendarType: str, changeType: str):
        offset = 1 if changeType == "next" else -1
        dateOffset = 0
        if calendarType == "day":
            dateOffset = dateutils.relativedelta(days=offset)
        if calendarType == "week":
            dateOffset = dateutils.relativedelta(weeks=offset)
        if calendarType == "month":
            dateOffset = dateutils.relativedelta(months=offset)


        self.dateOnDateBar = datetime.datetime(self.dateOnDateBar.year, self.dateOnDateBar.month,
                                               self.dateOnDateBar.day) + dateOffset

        if calendarType == "month":
            for i in range(0, 42):
                self.dayLabelList[i].setEventColorSet(set([]))
            self.generateCalendarDays()
            self.distinguishClickedDay()

    def setClickedDateInDateBar(self, labelText: str, labelName: str):
        offset = 0
        if int(labelName.split("_")[1]) <= 6 and int(labelText) >= 7:
            offset = -1

        elif int(labelName.split("_")[1]) >= 29 and int(labelText) <= 14:
            offset = 1

        self.dateOnDateBar = datetime.datetime(self.dateOnDateBar.year,
                                               self.dateOnDateBar.month + offset if 1 <= self.dateOnDateBar.month + offset <= 12
                                               else 12 if self.dateOnDateBar.month + offset < 1 else 1,
                                               int(labelText))

        for i in range(0, 42):
            self.dayLabelList[i].setEventColorSet(set([]))

        self.generateCalendarDays()

    @QtCore.pyqtSlot()
    def updateEventTypeColours(self):
        self.generateCalendarDays()
