# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AGNewEventW.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import datetime

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtGui import QFont

from Lib import FileOperationMethods
from GUI.Autogenerated.AGNewEventTypeW import Ui_NewEventTypeWindow
from Objects.Event import *
from Lib.FileOperationMethods import writeToJsonFile
from Objects.Event import eventsDictionary


class Ui_NewEventWindow(QtWidgets.QWidget):
    """Represents window for collecting data and creating new event."""

    def __init__(self):
        super().__init__()
        self.dateFromCalendar= None
        self.confrimEventButton = QtWidgets.QPushButton()
        self.remindBeforeComboBox = QtWidgets.QComboBox()
        self.cancelButton = QtWidgets.QPushButton()
        self.beforeEventLabel = QtWidgets.QLabel("before event.")
        self.remindLabel = QtWidgets.QLabel("Remind")
        self.eventLocalizationPlainTextEdit = QtWidgets.QPlainTextEdit()
        self.localizationLabel = QtWidgets.QLabel("Localization")
        self.eventDescriptionPlaneTextEdit = QtWidgets.QPlainTextEdit()
        self.descriptionLabel = QtWidgets.QLabel("Description")
        self.eventTitlePlainTextEdit = QtWidgets.QPlainTextEdit()
        self.titleLabel = QtWidgets.QLabel("Title")
        self.addEventTypeButton = QtWidgets.QPushButton()
        self.eventTypeComboBox = QtWidgets.QComboBox()
        self.eventTypeLabel = QtWidgets.QLabel("Event type")
        self.timeToEdit = QtWidgets.QTimeEdit()
        self.toLabel = QtWidgets.QLabel("To: ")
        self.timeFromEdit = QtWidgets.QTimeEdit()
        self.dateLabel = QtWidgets.QLabel("Date")
        self.dateEdit = QtWidgets.QDateEdit()
        self.allDayEventRadioButton = QtWidgets.QRadioButton("All day event")
        self.setDurationEventRadioButton = QtWidgets.QRadioButton("Set duration")
        self.fromLabel = QtWidgets.QLabel("From: ")

        self.gridLayout = QtWidgets.QGridLayout(self)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.setupUi()

    def setupUi(self):
        """Set basic appearance of the window (basic distances between elements)."""

        self.resize(500, 650)

        self.dateLabel.setFont(QFont("Times", 14, QFont.Bold))  # check weight set to 75

        self.dateEdit.setMinimumSize(QtCore.QSize(200, 0))
        self.dateEdit.setFont(QFont("Times", 17))
        self.dateEdit.setDateTime(QtCore.QDateTime(QtCore.QDate(2021, 8, 8), QtCore.QTime(0, 0, 0)))
        self.allDayEventRadioButton.setFont(QFont("Times", 14))

        self.setDurationEventRadioButton.setFont(QFont("Times", 14))

        self.fromLabel.setMinimumSize(QtCore.QSize(80, 0))
        self.fromLabel.setMaximumSize(QtCore.QSize(80, 16777215))
        self.fromLabel.setFont(QFont("Times", 14, QFont.Bold))  # weight 75

        self.timeFromEdit.setMinimumSize(QtCore.QSize(120, 30))
        self.timeFromEdit.setMaximumSize(QtCore.QSize(100, 16777215))
        self.timeFromEdit.setFont(QFont("Times", 12))

        self.toLabel.setMinimumSize(QtCore.QSize(40, 0))
        self.toLabel.setMaximumSize(QtCore.QSize(80, 16777215))
        self.toLabel.setFont(QFont("Times", 14, QFont.Bold))  # weight 75

        self.timeToEdit.setMinimumSize(QtCore.QSize(120, 30))
        self.timeToEdit.setMaximumSize(QtCore.QSize(100, 16777215))
        self.timeToEdit.setFont(QFont("Times", 12))
        self.timeToEdit.setDateTime(QtCore.QDateTime(QtCore.QDate(2000, 1, 1), QtCore.QTime(1, 0, 0)))

        self.eventTypeLabel.setFont(QFont("Times", 14, QFont.Bold))  # weight 75

        self.eventTypeComboBox.setMaximumSize(QtCore.QSize(250, 16777215))
        self.eventTypeComboBox.setFont(QFont("Times", 10))
        self.eventTypeComboBox.setCurrentText("")
        self.eventTypeComboBox.addItems(eventsTypesColorsDict.keys())

        self.addEventTypeButton.setText("Add new type")
        self.addEventTypeButton.setMaximumSize(QtCore.QSize(100, 16777215))
        self.addEventTypeButton.setFont(QFont("Times", 9))  # set Kerning
        self.addEventTypeButton.setStyleSheet("background-color: rgb(128, 200, 255);")

        self.titleLabel.setMinimumSize(QtCore.QSize(110, 0))
        self.titleLabel.setFont(QFont("Times", 14, QFont.Bold))  # weight 75

        self.eventTitlePlainTextEdit.setMaximumSize(QtCore.QSize(340, 60))
        self.eventTitlePlainTextEdit.setFont(QFont("Times", 10))

        self.descriptionLabel.setMinimumSize(QtCore.QSize(110, 0))
        self.descriptionLabel.setFont(QFont("Times", 14, QFont.Bold))  # weight 75

        self.eventDescriptionPlaneTextEdit.setMaximumSize(QtCore.QSize(340, 80))
        self.eventDescriptionPlaneTextEdit.setFont(QFont("Times", 10))

        self.localizationLabel.setMinimumSize(QtCore.QSize(110, 0))
        self.localizationLabel.setFont(QFont("Times", 14, QFont.Bold))  # weight 75

        self.eventLocalizationPlainTextEdit.setMaximumSize(QtCore.QSize(340, 40))
        self.eventLocalizationPlainTextEdit.setFont(QFont("Times", 10))

        self.remindLabel.setMaximumSize(QtCore.QSize(80, 16777215))
        self.remindLabel.setFont(QFont("Times", 10))

        self.remindBeforeComboBox.setMaximumSize(QtCore.QSize(200, 16777215))
        self.remindBeforeComboBox.setFont(QFont("Times", 10))

        self.beforeEventLabel.setMaximumSize(QtCore.QSize(110, 16777215))
        self.beforeEventLabel.setFont(QFont("Times", 10))

        self.cancelButton.setMinimumSize(QtCore.QSize(0, 40))
        self.cancelButton.setFont(QFont("Times", 11, QFont.Bold))  # weight 75
        self.cancelButton.setStyleSheet("background-color: rgb(213, 0, 0);")
        self.cancelButton.setText("Cancel")

        self.confrimEventButton.setMinimumSize(QtCore.QSize(0, 40))
        self.confrimEventButton.setFont(QFont("Times", 11, QFont.Bold))  # weight 75
        self.confrimEventButton.setStyleSheet("background-color: rgb(0, 181, 0);")
        self.confrimEventButton.setText("Confirm")

        self.verticalLayout.addItem(QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum,
                                                          QtWidgets.QSizePolicy.Fixed))

        self.horizontalLayout_13.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                               QtWidgets.QSizePolicy.Minimum))

        self.horizontalLayout_12.addWidget(self.dateLabel)
        self.horizontalLayout_12.addWidget(self.dateEdit)
        self.horizontalLayout_13.addLayout(self.horizontalLayout_12)
        self.horizontalLayout_13.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                               QtWidgets.QSizePolicy.Minimum))
        self.horizontalLayout_13.setStretch(2, 1)
        self.verticalLayout.addLayout(self.horizontalLayout_13)
        self.verticalLayout.addItem(QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum,
                                                          QtWidgets.QSizePolicy.Fixed))

        self.horizontalLayout_11.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                               QtWidgets.QSizePolicy.Minimum))
        self.horizontalLayout_11.addWidget(self.allDayEventRadioButton)
        self.horizontalLayout_11.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                               QtWidgets.QSizePolicy.Minimum))
        self.horizontalLayout_11.addWidget(self.setDurationEventRadioButton)
        self.horizontalLayout_11.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                               QtWidgets.QSizePolicy.Minimum))
        self.horizontalLayout_11.setStretch(2, 1)
        self.verticalLayout.addLayout(self.horizontalLayout_11)
        self.verticalLayout.addItem(QtWidgets.QSpacerItem(20, 10, QtWidgets.QSizePolicy.Minimum,
                                                          QtWidgets.QSizePolicy.Fixed))

        self.horizontalLayout_10.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                               QtWidgets.QSizePolicy.Minimum))

        self.horizontalLayout_9.addWidget(self.fromLabel)
        self.horizontalLayout_9.addWidget(self.timeFromEdit)
        self.horizontalLayout_10.addLayout(self.horizontalLayout_9)
        self.horizontalLayout_10.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                               QtWidgets.QSizePolicy.Minimum))

        self.horizontalLayout_8.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                              QtWidgets.QSizePolicy.Minimum))

        self.horizontalLayout_7.addWidget(self.toLabel)
        self.horizontalLayout_7.addWidget(self.timeToEdit)
        self.horizontalLayout_8.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_8.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                              QtWidgets.QSizePolicy.Minimum))
        self.horizontalLayout_8.setStretch(2, 1)
        self.horizontalLayout_10.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_10.setStretch(2, 1)
        self.verticalLayout.addLayout(self.horizontalLayout_10)
        self.verticalLayout.addItem(QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum,
                                                          QtWidgets.QSizePolicy.Fixed))
        self.horizontalLayout_6.addWidget(self.eventTypeLabel)
        self.horizontalLayout_6.addWidget(self.eventTypeComboBox)
        self.horizontalLayout_6.addWidget(self.addEventTypeButton)
        self.horizontalLayout_6.setStretch(1, 1)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.verticalLayout.addItem(QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Minimum,
                                                          QtWidgets.QSizePolicy.Fixed))
        self.horizontalLayout_5.addWidget(self.titleLabel)
        self.horizontalLayout_5.addWidget(self.eventTitlePlainTextEdit)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.verticalLayout.addItem(QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Minimum,
                                                          QtWidgets.QSizePolicy.Fixed))
        self.horizontalLayout_4.addWidget(self.descriptionLabel)
        self.horizontalLayout_4.addWidget(self.eventDescriptionPlaneTextEdit)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.verticalLayout.addItem(QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Minimum,
                                                          QtWidgets.QSizePolicy.Fixed))
        self.horizontalLayout_3.addWidget(self.localizationLabel)
        self.horizontalLayout_3.addWidget(self.eventLocalizationPlainTextEdit)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.verticalLayout.addItem(QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Minimum,
                                                          QtWidgets.QSizePolicy.Fixed))

        self.horizontalLayout_2.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                              QtWidgets.QSizePolicy.Minimum))
        self.horizontalLayout_2.addWidget(self.remindLabel)
        self.horizontalLayout_2.addWidget(self.remindBeforeComboBox)
        self.horizontalLayout_2.addItem(QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Fixed,
                                                              QtWidgets.QSizePolicy.Minimum))
        self.horizontalLayout_2.addWidget(self.beforeEventLabel)
        self.horizontalLayout_2.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                              QtWidgets.QSizePolicy.Minimum))
        self.horizontalLayout_2.setStretch(2, 1)
        self.verticalLayout.addLayout(self.horizontalLayout_2)

        self.verticalLayout.addItem(QtWidgets.QSpacerItem(20, 28, QtWidgets.QSizePolicy.Minimum,
                                                          QtWidgets.QSizePolicy.Fixed))

        self.horizontalLayout.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                            QtWidgets.QSizePolicy.Minimum))
        self.horizontalLayout.addWidget(self.cancelButton)
        self.horizontalLayout.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                            QtWidgets.QSizePolicy.Minimum))
        self.horizontalLayout.addWidget(self.confrimEventButton)
        self.horizontalLayout.addItem(QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding,
                                                            QtWidgets.QSizePolicy.Minimum))
        self.horizontalLayout.setStretch(2, 1)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.verticalLayout.setStretch(1, 1)
        self.verticalLayout.setStretch(3, 1)
        self.verticalLayout.setStretch(5, 1)
        self.verticalLayout.setStretch(7, 1)
        self.verticalLayout.setStretch(9, 1)
        self.verticalLayout.setStretch(11, 1)
        self.verticalLayout.setStretch(13, 1)
        self.verticalLayout.setStretch(15, 1)
        self.verticalLayout.setStretch(16, 1)
        self.verticalLayout.setStretch(17, 1)
        self.gridLayout.addLayout(self.verticalLayout, 0, 0, 1, 1)

        self.init_ui()

    def init_ui(self) -> None:
        """Contains additional setups and methods calls."""

        self.remindBeforeComboBox.addItem("15 minutes")
        self.remindBeforeComboBox.addItem("30 minutes")
        self.remindBeforeComboBox.addItem("1 hour")
        self.remindBeforeComboBox.addItem("5 hours")
        self.remindBeforeComboBox.addItem("1 day")
        self.addEventTypeButton.clicked.connect(self.openNewEventTypeWindow)
        self.cancelButton.clicked.connect(self.closeWindow)
        self.confrimEventButton.clicked.connect(self.confirmAddingNewEvent)
        FileOperationMethods.readFromJsonFileToDict("./events.json", eventsDictionary, "events")
        self.setDurationEventRadioButton.setChecked(True)

    def openNewEventTypeWindow(self) -> None:
        """Create a window for adding new type of the event."""

        self.mainWindow = QtWidgets.QMainWindow()
        self.ui_newEventTypeWindow = Ui_NewEventTypeWindow()
        self.ui_newEventTypeWindow.setupUi(self.mainWindow)
        self.mainWindow.show()

    def closeWindow(self) -> None:
        """Only close the opened window, used for 'Close' buttons etc."""

        self.close()

    def setDateFromCalendar(self, date) -> None:
        """Sets date in the date edit field. The date is taken from the date bar in the main window."""

        self.dateFromCalendar = date
        self.dateEdit.setDateTime(QtCore.QDateTime(QtCore.QDate(self.dateFromCalendar.year, self.dateFromCalendar.month,
                                                                self.dateFromCalendar.day), QtCore.QTime(0, 0, 0)))

    def changeEventToJsonFile(self) -> dict:
        """Changes the event object to the JSON dictionary."""

        eventDict = {}

        if self.allDayEventRadioButton.isChecked():
            timeFrom = datetime.datetime.strptime("00:00", '%H:%M')
            timeTo = datetime.datetime.strptime("23:59", '%H:%M')
            eventDuration = EventDuration(True, timeFrom, timeTo)
            event = Event(datetime.datetime(self.dateEdit.date().year(), self.dateEdit.date().month(), self.dateEdit.date().day()),
                          self.eventTitlePlainTextEdit.toPlainText(), self.eventDescriptionPlaneTextEdit.toPlainText(),
                          self.eventLocalizationPlainTextEdit.toPlainText(), eventDuration,
                          str(self.eventTypeComboBox.currentText()), str(self.remindBeforeComboBox.currentText()))

            eventHash = hash(event)

            eventDict = {
                "eventId": str(eventHash),
                "eventYear": self.dateEdit.date().year(),
                "eventMonth": self.dateEdit.date().month(),
                "eventDay": self.dateEdit.date().day(),
                "allDayEvent": int(eventDuration.getIsAllDayEvent()),
                "timeFromHour": 0,
                "timeFromMinute": 0,
                "timeToHour": 23,
                "timeToMinute": 59,
                "type": str(self.eventTypeComboBox.currentText()),
                "title": self.eventTitlePlainTextEdit.toPlainText(),
                "description": self.eventDescriptionPlaneTextEdit.toPlainText(),
                "localization": self.eventLocalizationPlainTextEdit.toPlainText(),
                "reminder": str(self.remindBeforeComboBox.currentText())
            }

        if self.setDurationEventRadioButton.isChecked():

            timeFrom = datetime.datetime.strptime(str(self.timeFromEdit.time().hour()) + ":" + str(self.timeFromEdit.time().minute()), '%H:%M')
            timeTo = datetime.datetime.strptime(str(self.timeToEdit.time().hour()) + ":" + str(self.timeToEdit.time().minute()), '%H:%M')

            eventDuration = EventDuration(False, timeFrom, timeTo)
            event = Event(datetime.datetime(self.dateEdit.date().year(), self.dateEdit.date().month(), self.dateEdit.date().day()),
                          self.eventTitlePlainTextEdit.toPlainText(), self.eventDescriptionPlaneTextEdit.toPlainText(),
                          self.eventLocalizationPlainTextEdit.toPlainText(), eventDuration,
                          str(self.eventTypeComboBox.currentText()), str(self.remindBeforeComboBox.currentText()))

            eventHash = hash(event)

            eventDict = {
                "eventId": str(eventHash),
                "eventYear": self.dateEdit.date().year(),
                "eventMonth": self.dateEdit.date().month(),
                "eventDay": self.dateEdit.date().day(),
                "allDayEvent": int(eventDuration.getIsAllDayEvent()),
                "timeFromHour": self.timeFromEdit.time().hour(),
                "timeFromMinute": self.timeFromEdit.time().minute(),
                "timeToHour": self.timeToEdit.time().hour(),
                "timeToMinute": self.timeToEdit.time().minute(),
                "type": str(self.eventTypeComboBox.currentText()),
                "title": self.eventTitlePlainTextEdit.toPlainText(),
                "description": self.eventDescriptionPlaneTextEdit.toPlainText(),
                "localization": self.eventLocalizationPlainTextEdit.toPlainText(),
                "reminder": str(self.remindBeforeComboBox.currentText())
            }
        return eventDict

    def confirmAddingNewEvent(self) -> None:
        """Used for 'Confirm' button. Adds new event to the events dictionary,
        saves the event dictionary to the JSON file and closes the new event window."""

        eventsDictionary["events"].append(self.changeEventToJsonFile())
        writeToJsonFile("./events.json", eventsDictionary)
        self.closeWindow()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_NewEventWindow()
    ui.show()
    sys.exit(app.exec_())
